// schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum Role {
  OWNER
  ADMIN
  VIEWER
  EMPLOYEE
  RECRUITER
  PEOPLE_MANAGER
  HIRING_MANAGER
  ONBOARDING_MANAGER
  UNASSIGNED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  INACTIVE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique
  userId       String
  clientId     String
  clientUserId String
  expires      DateTime
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  client       Client     @relation(fields: [clientId], references: [id])
  clientUser   ClientUser @relation(fields: [clientUserId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  userDomain    String?
  accounts      Account[]
  sessions      Session[]
  client        ClientUser[]
  jobPostings   JobPosting[]
}

model Client {
  id            String       @id @default(cuid())
  domain        String       @unique
  companyName   String?
  logo          String?
  website       String?
  description   String?
  countryCode   String?
  phoneNumber   String?
  streetNo      String?
  streetAddress String?
  province      String?
  zipCode       String?
  country       String?
  user          ClientUser[]
  jobPostings   JobPosting[]
  sessions      Session[]
  department    Department[]
}

model ClientUser {
  id       String    @id @default(cuid())
  client   Client    @relation(fields: [clientId], references: [id])
  clientId String
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  role     Role[]
  sessions Session[]
}

model JobPosting {
  id              String     @id @default(cuid())
  title           String
  description     String?
  location        String?
  salary          String?
  positionsNumber String?
  skills          String[]
  employmentType  String?
  workPlace       String?
  workHours       String?
  department      Department? @relation(fields: [departmentId], references: [id])
  departmentId    String?
  // department      String?
  company         Client     @relation(fields: [clientId], references: [id])
  clientId        String
  postedBy        User       @relation(fields: [postedById], references: [id])
  postedById      String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  status          PostStatus
  publishedAt     DateTime?
  experienceMin   Int?
  experienceMax   Int?
  jobLevel        JobLevel?   @relation(fields: [jobLevelId], references: [id])
  jobLevelId      String?
  // jobLevel        String?
  startDate       DateTime?
  endDate         DateTime?
  dueDate         DateTime?
  closingDate     DateTime?
  // session            Session[]
  // recruiters         User @relation(fields: [recruiterId], references: [id])
  // recruiterId        String
  // hiringManager      User @relation(fields: [hiringManagerId], references: [id])
  // hiringManagerId    String
}

model Department {
  id             String       @id @default(cuid())
  departmentName String
  client         Client       @relation(fields: [clientId], references: [id])
  clientId       String
  jobLevel       JobLevel[]
  JobPosting     JobPosting[]
}

model JobLevel {
  id           String       @id @default(cuid())
  name         String
  parentLevel  String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String
  JobPosting   JobPosting[]
}
