// schema.prisma

generator client {
  provider = "prisma-client-js" 
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum Role {
  OWNER
  ADMIN
  VIEWER
  EMPLOYEE
  RECRUITER
  PEOPLE_MANAGER
  HIRING_MANAGER
  ONBOARDING_MANAGER
  UNASSIGNED
}

enum PostStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED_INTERNALLY
  PUBLISHED_EXTERNALLY
  ARCHIVED
  DELETED
  RECRUITMENT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                String       @id @default(cuid())
  sessionToken      String       @unique
  userId            String
  clientId          String
  clientUserId      String
  expires           DateTime
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  client            Client       @relation(fields: [clientId], references: [id])
  clientUser        ClientUser   @relation(fields: [clientUserId], references: [id])
}


model VerificationToken {
  identifier        String
  token             String      @unique
  expires           DateTime

  @@unique([identifier, token])
}
model User {
  id                String      @id @default(cuid())
  firstName         String?
  lastName          String?
  email             String      @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  userDomain        String?
  accounts          Account[]
  sessions          Session[]
  client            ClientUser[]
}

model Client {  
  id                String    @id @default(cuid())
  domain            String    @unique
  companyName       String?
  logo              String? 
  website           String?
  description       String?
  countryCode       String?
  phoneNumber       String?
  streetNo          String?
  streetAddress     String?
  province          String?
  zipCode           String?
  country           String?
  user              ClientUser[]
  jobPostings       JobPosting[]
  sessions          Session[]
} 

model ClientUser {
  id                String @id @default(cuid())
  client            Client @relation(fields: [clientId], references: [id])
  clientId          String 
  user              User @relation(fields: [userId], references: [id])
  userId            String
  role              Role[]
  sessions          Session[]
  jobPostings       JobPosting[]
}

model JobPosting {
  id                String @id @default(cuid())
  title             String
  description       String
  location          String
  salary            String?
  qualifications    String?
  skills            String
  employmentType    String
  workPlace         String
  workHours         String?
  department        String?
  company           Client @relation(fields: [clientId], references: [id])
  clientId          String
  postedBy          ClientUser @relation(fields: [postedById], references: [id])
  postedById        String
  // recruiters        ClientUser[] @relation(fields: [recruiterId], references: [id])
  // recruiterId       String
  // hiringManager     ClientUser @relation(fields: [hiringManagerId], references: [id])
  // hiringManagerId   String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  status            PostStatus
  publishInternal   DateTime?
  publishExternal   DateTime?
}

